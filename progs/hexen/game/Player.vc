//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Player.vc 4374 2011-03-03 22:53:59Z firebrand_kh $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

BotPlayer Bot;

//==========================================================================
//
//  CreateBot
//
//==========================================================================

void CreateBot()
{
	Bot = BotPlayer(SpawnObject(BotPlayer));
	Bot.player = self;
	Bot.OnBeginPlay();
	bAutoAim = true;
}

//==========================================================================
//
//  OnNetReborn
//
//==========================================================================

void OnNetReborn(EntityEx OldMO)
{
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

void DestroyBot()
{
	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

void BotOnSpawn()
{
	Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

void DoClearPlayer()
{
	BotPlayer b;

	b = Bot;
	::DoClearPlayer();
	Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return MAXHEALTH;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
}

//==========================================================================
//
//  BotTick
//
//==========================================================================

void BotTick(float deltaTime)
{
	Bot.BotTick(deltaTime);
}

//==========================================================================
//
//  SpawnSpeedEffect
//
//==========================================================================

void SpawnSpeedEffect()
{
	Actor speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
	if (speedA)
	{
		speedA.Angles.yaw = MO.Angles.yaw;
		speedA.Translation = MO.Translation;
		speedA.Target = Actor(MO);
		speedA.Special1 = PClass;
		if (speedA.Special1 > 2)
		{
			speedA.Special1 = 0;
		}
		int Idx;
		switch (PClass)
		{
		case HexenDefs::PCLASS_FIGHTER:
			Idx = 0;
			break;
		case HexenDefs::PCLASS_CLERIC:
			Idx = 2;
			break;
		case HexenDefs::PCLASS_MAGE:
			Idx = 4;
			break;
		case HexenDefs::PCLASS_PIG:
			Idx = 6;
			break;
		}
		speedA.SetState(GetStatePlus(speedA.IdleState, Idx, true));
		speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
		if (self == GPlayers[consoleplayer])
		{
			speedA.bHidden = true;
		}
#endif
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{

}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;	

	if (MorphTime)
	{
		// don't change class if the player is morphed
		cprint("CAN'T CHANGE CLASS WHILE MORPHED");
		return;
	}
	if (Cmd_CheckParm("fighter"))
	{
		pclass = HexenDefs::PCLASS_FIGHTER;
	}
	else if (Cmd_CheckParm("cleric"))
	{
		pclass = HexenDefs::PCLASS_CLERIC;
	}
	else if (Cmd_CheckParm("mage"))
	{
		pclass = HexenDefs::PCLASS_MAGE;
	}
	else
	{
		cprint("INVALID PLAYER CLASS");
		return;
	}
	
	
	BaseClass = pclass;
//	PostMorphWeapon(HexenDefs::WP_FIRST);
	SetCvar('class', pclass);
}

//==========================================================================
//
//  IsWeaponAlwaysExtremeDeath
//
//==========================================================================

bool IsWeaponAlwaysExtremeDeath()
{
	// Always extreme death from fourth weapon
	return false;
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (Victim == MO)
		{
			// Self-frag
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerMorphed
//
//==========================================================================

void PlayerMorphed(EntityEx OldMO)
{
	PClass = HexenDefs::PCLASS_PIG;
}

defaultproperties
{
}
