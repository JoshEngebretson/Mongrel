//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Actor.Misc.vc 4373 2011-02-27 17:22:59Z firebrand_kh $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**	Class for Actor state action methods.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	// Remove from creature queue
	if (bMonster && bCorpse)
	{
		A_DeQueueCorpse();
	}

	::Destroyed();
}

//**************************************************************************
//	Not documented
//**************************************************************************

//===========================================================================
//
//  A_Log
//
//===========================================================================

final void A_Log(string text)
{
	print("<------------------------------->");
	print("%s", text);
	print("<------------------------------->");
}

//===========================================================================
//
//  A_LogInt
//
//===========================================================================

final void A_LogInt(int num)
{
	print("<------------------------------->");
	print("%i", num);
	print("<------------------------------->");
}

//===========================================================================
//
//  A_ChangeVelocity
//
//===========================================================================

final void A_ChangeVelocity(float x, float y, float z, int flags)
{
	float vx = x, vy = y, vz = z;

	if (flags & 1)	// relative axes - make x, y relative to actor's current angle
	{
		vx = x * -y * cos(Angles.yaw) * sin(Angles.yaw);
		vx /= 4.0 * 35.0;
		vy = x * sin(Angles.yaw) * y * cos(Angles.yaw);
		vy /= 4.0 * 35.0;
	}
	if (flags & 2)	// discard old velocity - replace old velocity with new velocity
	{
		Velocity.x = vx;
		Velocity.y = vy;
		Velocity.z = vz;
	}
	else	// add new velocity to old velocity
	{
		Velocity.x += vx;
		Velocity.y += vy;
		Velocity.z += vz;
	}
}

//===========================================================================
//
//  A_ScaleVelocity
//
//===========================================================================

final void A_ScaleVelocity(float scale)
{
	Velocity.x *= scale;
	Velocity.y *= scale;
	Velocity.z *= scale;
}

//===========================================================================
//
//  A_SetGravity
//
//===========================================================================

final void A_SetGravity(float Grav)
{
	Gravity = Grav;
	if (Gravity < 0.0)
	{
		Gravity = 0.0;
	}
	else if (Gravity > 1.0)
	{
		Gravity = 1.0;
	}
}

//===========================================================================
//
//  A_Respawn
//
//===========================================================================

final void A_Respawn(optional int Flags)
{
	TVec Org;
	bool OK = false;
	Org.x = SpawnPoint.x;
	Org.y = SpawnPoint.y;
	Org.z = GetPlanePointZ(&XLevel.PointInSector(Org)->floor, Org);
	SetOrigin(Org);
	bSolid = true;
	Height = default.Height;
	if (Flags & 4)
	{
		if (TeleportMove (Org, true))
		{
			OK = true;
		}
	}
	else if (TestLocation())
	{
			OK = true;
	}
	if (OK)
	{
		Health = default.Health;

		// [KS] Don't keep target, because it could be self if the monster committed suicide
		//      ...Actually it's better off an option, so you have better control over monster behavior.
		if (!(Flags & 2))
		{
			Target = none;
			LastHeard = none;
			LastEnemy = none;
		}
		else
		{
			// Don't attack yourself (Re: "Marine targets itself after suicide")
			if (Target == self)
			{
				Target = none;
			}
			if (LastEnemy == self)
			{
				LastEnemy = none;
			}
		}

		//	Restore default flags
		RespawnResetFlags();
		SetState(IdleState);
		bInvisible = false;
		if (Flags & 1)
		{
			Spawn(TeleportFog, Origin + vector(0.0, 0.0,
				LineSpecialGameInfo(Level.Game).TeleFogHeight));
		}
		if (CountsAsKill())
		{
			Level.TotalKills++;
		}
	}
	else
	{
		bSolid = false;
	}
}


//==========================================================================
//
//  A_FreeTargMobj
//
//==========================================================================

final void A_FreeTargMobj()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	Gravity = 1.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bCountKill = false;
	bMonster = false;
	bSkullFly = false;
	bIceCorpse = false;
	bNoGravity = true;
	bDropOff = true;
	bCorpse = true;
	bPassMobj = false;
	RenderStyle = STYLE_None;
	Alpha = 0.0;
	Player = none;
	bIsPlayer = false;
	Health = -1000;	// Don't resurrect
}

//==========================================================================
//
//  A_ExecActionSpecial
//
//==========================================================================

final void A_ExecActionSpecial(int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, int Special)
{
	Level.ExecuteActionSpecial(Special, Arg1, Arg2, Arg3, Arg4, Arg5, NULL,
		0, self);

}



