//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Actor.MissileMovement.vc 4330 2010-09-09 17:39:30Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//	Missile movement
//**************************************************************************

//==========================================================================
//
//  A_SeekerMissile
//
//==========================================================================

final void A_SeekerMissile(int Threshold, int TurnMax, optional int flags,
							optional int chance, optional int distance)
{
	
}

//==========================================================================
//
//	A_Tracer2
//
//==========================================================================

const float TRACE2ANGLE	= (7.0 * 45.0 / 16.0);

final void A_Tracer2()
{
	
}

//==========================================================================
//
//  A_Fire
//
//==========================================================================

final void A_Fire()
{
	decorate_A_Fire();
}

//==========================================================================
//
//  decorate_A_Fire
//
//  Keep fire in front of player unless out of sight.
//
//==========================================================================

final void decorate_A_Fire(optional int Height)
{
	if (!Target || !Tracer)
	{
		return;
	}

	// don't move it if the vile lost sight
	if (!Target.CanSee(Tracer))
	{
		return;
	}

	UnlinkFromWorld();
	Origin.x = Tracer.Origin.x + 24.0 * cos(Tracer.Angles.yaw);
	Origin.y = Tracer.Origin.y + 24.0 * sin(Tracer.Angles.yaw);
	if (!specified_Height)
	{
		Origin.z = Tracer.Origin.z;
	}
	else
	{
		Origin.z = Tracer.Origin.z + itof(Height);
	}
	LinkToWorld();
}

//==========================================================================
//
//	A_BishopMissileWeave
//
//==========================================================================

final void A_BishopMissileWeave()
{
	int WeaveXY = Special2 >> 16;
	int WeaveZ = Special2 & 0xffff;
	float angle = AngleMod360(Angles.yaw + 90.0);
	float newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 2.0;
	float newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 2.0;
	WeaveXY = (WeaveXY + 2) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 2.0;
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 2.0;
	TryMove(vector(newX, newY, Origin.z), false);
	Origin.z -= Level.Game.FloatBobOffsets[WeaveZ];
	WeaveZ = (WeaveZ + 2) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveZ];
	Special2 = (WeaveXY << 16) | WeaveZ;
}

//============================================================================
//
//  A_CStaffMissileSlither
//
//============================================================================

final void A_CStaffMissileSlither()
{
	int WeaveXY = Special2;
	float angle = AngleMod360(Angles.yaw + 90.0);
	float newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY];
	float newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY];
	WeaveXY = (WeaveXY + 3) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY];
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY];
	TryMove(vector(newX, newY, Origin.z), false);
	Special2 = WeaveXY;
}

//==========================================================================
//
//	A_Countdown
//
//==========================================================================

final void A_Countdown()
{
	if (--ReactionCount <= 0)
	{
		//ExplodeMissile(none);
		//bSkullFly = false;
	}
}

//==========================================================================
//
//	A_CountdownArg
//
//==========================================================================

final void A_CountdownArg(int Index)
{
	if (Index <= 0 || Index > 5)
	{
		return;
	}
	if (!Args[Index - 1]--)
	{
		if (bMissile)
		{
			//ExplodeMissile(none);
		}
		else if (bShootable)
		{
			//Damage(none, none, Health);
		}
		else
		{
			SetState(FindState('Death'));
		}
	}
}

//============================================================================
//
//  A_Stop
//
//============================================================================

final void A_Stop()
{
	Velocity = vector(0.0, 0.0, 0.0);
}
