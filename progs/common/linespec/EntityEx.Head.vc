//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: EntityEx.Head.vc 4379 2011-03-08 18:15:31Z firebrand_kh $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class EntityEx : Entity
	abstract;

const int
	GAME_Doom				= 0x01,
	GAME_Heretic			= 0x02,
	GAME_Hexen				= 0x04,
	GAME_Strife				= 0x08,
	GAME_Raven				= GAME_Heretic | GAME_Hexen;

const float ONFLOORZ		= -99999.0;
const float ONCEILINGZ		= 99999.0;
const float FLOATRANDZ		= 99998.0;

const float FRICTION_NORMAL	= 3.28125;
const float FRICTION_LOW	= 0.95703125;
const float FRICTION_FLY	= 2.87109375;
const float FRICTION_WATER	= 3.0;

const float MAXMOVE			= 1050.0;
const float MAXMOVESTEP		= MAXMOVE / (35.0 * 2.0);
const float STOPSPEED		= 2.1875;

const float BOUNCE_VAL		= 1.5;

// follow a player exlusively for 3 seconds
const int BASETHRESHOLD		= 100;

const float MELEERANGE		= 64.0;
const float MISSILERANGE	= (32.0 * 64.0);

const float MONS_LOOK_RANGE	= (20.0 * 64.0);
const int MONS_LOOK_LIMIT	= 64;

//	Factor to scale scrolling effect into mobj-carrying properties = 3/32.
// (This is so scrolling floors and objects on them can move at same speed.)
const float CARRYFACTOR		= 0.09375;

enum
{
	BOUNCE_None,
	BOUNCE_Doom,
	BOUNCE_Heretic,
	BOUNCE_Hexen
};

enum
{
	APROP_Health		= 0,
	APROP_Speed			= 1,
	APROP_Damage		= 2,
	APROP_Alpha			= 3,
	APROP_RenderStyle	= 4,
	APROP_Ambush		= 10,
	APROP_Invulnerable	= 11,
	APROP_JumpZ			= 12,
	APROP_ChaseGoal		= 13,
	APROP_Frightened	= 14,
	APROP_Gravity		= 15,
	APROP_Friendly		= 16,
	APROP_SpawnHealth	= 17,
	APROP_SeeSound		= 5,	// Sounds can only be set, not gotten
	APROP_AttackSound	= 6,
	APROP_PainSound		= 7,
	APROP_DeathSound	= 8,
	APROP_ActiveSound	= 9
};

enum
{
	PROP_FROZEN					= 0,
	PROP_NOTARGET				= 1,
	PROP_INSTANTWEAPONSWITCH	= 2,
	PROP_FLY					= 3,
	PROP_TOTALLYFROZEN			= 4,
	PROP_INVULNERABILITY		= 5,
	PROP_STRENGTH				= 6,
	PROP_INVISIBILITY			= 7,
	PROP_RADIATIONSUIT			= 8,
	PROP_ALLMAP					= 9,
	PROP_INFRARED				= 10,
	PROP_WEAPONLEVEL2			= 11,
	PROP_FLIGHT					= 12,
	PROP_SPEED					= 15
};

//	Constants for ClassifyActor
enum
{
	ACTOR_NONE				= 0x00000000,
	ACTOR_WORLD				= 0x00000001,
	ACTOR_PLAYER			= 0x00000002,
	ACTOR_BOT				= 0x00000004,
	ACTOR_VOODOODOLL		= 0x00000008,
	ACTOR_MONSTER			= 0x00000010,
	ACTOR_ALIVE				= 0x00000020,
	ACTOR_DEAD				= 0x00000040,
	ACTOR_MISSILE			= 0x00000080,
	ACTOR_GENERIC			= 0x00000100
};

//	Constants for A_SeekerMissile
enum
{
	SMF_LOOK 				= 1,
	SMF_PRECISE 			= 2
};

//  States
state			IdleState;
state			SeeState;
state			MeleeState;
state			MissileState;

//	Sounds
name			SightSound;
name			ActiveSound;
name			AttackSound;
name			PainSound;
name			CrushPainSound;
name			DeathSound;
name			HowlSound;
name			BounceSound;

//	Flags
bool bSpecial;			// Call P_SpecialThing when touched.
bool bShootable;		// Can be hit.
bool bAmbush;
bool bSpawnCeiling;		// Hang from ceiling instead of floor.
// movement flags
bool bNoBlood;			//  Don't bleed when shot (use puff).
bool bInFloat;			//  Floating to a height for a move, don't.
						//  Auto float to target's height.
bool bWindThrust;		//  Gets pushed around by the wind specials.
bool bActivateImpact;	//  An MF_MISSILE mobj can activate.
						//  SPAC_IMPACT
bool bActivatePushWall;	//  Mobj can push walls.
bool bActivateMCross;	//  Can activate monster cross lines.
bool bActivatePCross;	//  Can activate projectile cross lines.
bool bDormant;			//  Thing is dormant.
bool bWaterJump;
bool bNoTeleport;		//  Does not teleport.
bool bTelestomp;		//  Mobj can stomp another.
bool bCannotPush;		//  Cannot push other pushable mobjs.
bool bSmallSplash;		//  Always use small splash.
bool bNoSplash;			//  Things that don't splash.
bool bStaticLight;		//  Static light source.
bool bStaticLightSpwned;
bool bDynamicLight;		//  Dynamic light source.
bool bLeaveTrail;		//  Leave particles trail type 1 (Rocket).
bool bLeaveTrail2;		//  Leave particles trail type 2 (Grenade).
bool bTriggerHappy;
bool bFloatBob;			//  Use float bobbing z movement.
bool bOnmobjCopyVel;
bool bNoBounceSound;	//	Don't make sound when bouncing.
bool bNoWallBounceSnd;	//	Don't make sound when bouncing off a wall.
bool bNoSplashAlert; 	//  Splashes don't alert this monster.
bool bBounceSky;		//	Bounce when hitting the sky.
bool bExplodeOnSky;		//	Explodes when hits the sky.
bool bBounceWalls;		//  Bounces off of walls.
bool bBounceFloors;		//  Bounces off of floors.
bool bBounceCeilings;	//  Bounces off of ceilings.
bool bBounceOnActors;	//  Bounces against other "non sentient" actors.
bool bBounceOnAllActors; // Bounces off of ALL actors.
bool bBounceAutoOff;	//  When bouncing off a floor, if the new Z velocity is below 3.0, disable further bouncing.
bool bBounceLikeHeretic; // Goes into Death state when bouncing on floors or ceilings.
bool bSlide;			//  Slides against walls.
bool bReflective;		//  Reflects missiles.
bool bSeekerMissile;	//  Is a seeker (for reflection).
bool bNoExplodeFloor;	//	Don't explode when hitting the floor.
bool bExplodeOnWater;	//	Explode on water surfaces.
bool bCanBounceWater;	//	Bounce on water surfaces.
bool bFallingFriction;	//	Apply friction while falling.
bool bNoRadiusDamage;	//	Does not take radius damage.
bool bPuffOnActors;		//	Spawn this puff when hitting actors.
bool bInvulnerable;		//  Mobj is invulnerable.
bool bFriendly;			//  Will fight on player's side.
bool bRandomise;		//	Randomise initial state time.
bool bFullVolDeath;		//	Play missile death sound at full volume.
bool bNoExtremeDeath;	//  Does never gib enemies.
bool bExtremeDeath;		//  Always gibs enemies.
bool bNoGrudge;
bool bNeverTarget;		//	Never switch target to this actor.
bool bNoTargetSwitch;	//	Never switches target until current one is dead.
bool bNoGravKill;		//	Doesn't set NoGravity to false when killed.
bool bFaster;
bool bFastMelee;
bool bStanding;			//  Don't walk around.
bool bNonShootable;		//  Mobj is totally non-shootable,
						//  but still considered solid.
bool bThruGhost;		//  Missile will pass through ghosts.
bool bRip;				//  Missile rips through solid targets.
bool bPushable;			//  Can be pushed by other moving mobjs.
bool bBloodlessImpact;	//	Don't spawn blood when hitting a thing.
bool bTeleport;			//  Don't cross lines or look at heights.
bool bSpawnFloat;		//  Spawn random float z.
bool bNoBlockMonst;		//  Can cross ML_BLOCKMONSTERS lines
bool bStandMustSeeTarget;	//  COUNTITEM	800000
bool bFullVolActive;	//	Play active sound at full volume.
bool bDehackedSpecial;	//  Old style special handling.
bool bUnknown2;			//  8000000
bool bPuffParticles;	//  Puff spawns particles.
bool bExplodeParticles;	//  Use particle explosion.
bool bNoSightCheck;		//  Go after target without checking sight.
bool bVisibilityPulse;	//  Pulse visibility in and out.
bool bArgsDefined;		//  Args are already defined.
bool bShadow;			//  Actor is hard for monsters to see.
bool bGhost;			//  Actor is a ghost.
bool bDontTranslate;	//  Don't use translation.
bool bNoLiftDrop;		//  Don't fall down with the lift.
bool bDontSquash;		//  Death ball can't squash this actor.
bool bNoTeleOther;		//  Monster is not affected by teleport other artifact.
bool bDontGib;			//  Don't crunch this corpse to gibs.
bool bNoPain;			//  Don't enter pain state.
bool bSpawnSoundSource;	//  Play missile's see sound on spawning object.
bool bAlwaysPuff;		//  Always show puff, even when hit nothing.
bool bSynchronised;		//  For map spawned things don't randomise tics.
bool bAlwaysRespawn;	//  Always respawns, regardless of skill.
bool bNeverRespawn;		//  Never respawns, regardless of skill.
bool bCanUseWalls;		//  Can activate "use" specials.
transient bool bInChase; //  Used to prevent recursion in A_Chase.
bool bUseSpecial;		//  Execute special when this thing is being used.
bool bDehExplosion;		//  Use explosion style specified using DeHackEd.
bool bPuffGetsOwner;	//  [BB] Sets the owner of the puff to the player who fired it.
bool bNoInteraction;	//  Thing is completely excluded from any gameplay related checks.
bool bTouchy;			//  killough 11/98: Dies when solids touch it.
bool bArmed;			//  Object is armed (for touchy objects).
bool bJumpDown;			//  Generalization of dog behavior with dropoffs.
bool bMoveWithSector;	//  P_ChangeSector() will still process this actor if it has MF_NOBLOCKMAP.
bool bNoTrigger;		//  Actor cannot trigger any line actions.
bool bBlockedBySolidActors;	//  Blocked by solid actors, even if not solid itself.
bool bThruActors;		//  Performs no actor<->actor collision checks.
bool bBumpSpecial;		//  Actor executes its special when being collided (as the ST flag).
bool bMBFBounce;		//	Doesn't dies while bouncing speed is higher than 0.
bool bAvoidsDropOffs;	//	Monster does avoid dropoffs, overrides value of compat_dropoff CVar.
bool bNoTimeFreeze;		//  Monster isn't affected by Time Freeze powerups.
bool bCrashed;			//	Means a monster that has crash state hasn't crashed and can execute Crash method.

//  Params
float			Speed;
float			FastSpeed;
float			FloatSpeed;

int				WoundHealth;
int				GibsHealth;

//	Damage info.
array<DamageFactor>		DamageFactors;
float					PainChance;
array<PainChanceInfo>	PainChances;

float			MissileChance;
float			MissileMinRange;
float			MissileMaxRange;

byte			BounceType;
byte			BounceCount;
float			BounceFactor;
float			WallBounceFactor;

// Thing being chased/attacked (or NULL).
// Also the originator for missiles.
EntityEx		Target;
// For monster families
string			Species;
// Last known enemy -- killogh 2/15/98
EntityEx		LastEnemy;
EntityEx		Tracer;
// Monster's goal if not chasing anything
EntityEx		Goal;
//	Master entity
EntityEx		Master;
//	Last actor this one heard
EntityEx		LastHeard;

// Player number last looked for.
int				LastLook;
//	The same for actor.
Entity			LastLookActor;

int				MissileDamage;	// For missiles
int				MissilePoisonDamage;

// For nightmare respawn.
mthing_t		SpawnPoint;

// Reaction time: if non 0, don't attack yet.
int				ReactionCount;
// Used by player to freeze a bit after teleporting.
float			ReactionTime;

// If >0, the target will be chased
// no matter what (even if shot)
int				Threshold;

// Movement direction, movement generation (zig-zagging).
int				MoveDir;		// 0-7
int				MoveCount;		// when 0, select a new dir
int				strafecount;    // killough 9/8/98: monster strafing
int				FastChaseStrafeCount;

int				VisDir;

float			RDFactor;

// Static light parameters.
TVec			LightOffset;
int				LightColour;
float			LightRadius;

// Dynamic light parameters.
int				DLightColour;
float			DLightRadius;
int				ExplodeEffect;
float			prev_rad;

float			MeleeRange;

int				Special1;	// Special info
int				Special2;	// Special info
float			Special1f;
float			Special2f;
class<EntityEx>	SpecialCID;

name			DamageType;

float			DeathHeight;
float			BurnHeight;

float			FloatBobPhase;

//	For A_ExplodeParms
int				ExplosionDamage;
int				ExplosionRadius;

string			Obituary;
string			HitObituary;

state			PrevEffectState;

int				MeleeDamage;
name			MeleeSound;
float			MissileHeight;
class<Actor>	MissileType;

//	View offset when used as a player camera
float			CameraHeight;

//	Customiseable blood
class<Actor>	BloodType;
class<Actor>	BloodSplatterType;
class<Actor>	AxeBloodType;
int				BloodColour;
int				BloodTranslation;

array<DropItemInfo>	DropItemList;

int				SkillRespawnCount;

//	Customiseable Jump Velocity
float			JumpVelZ;

float			JumpTime;

