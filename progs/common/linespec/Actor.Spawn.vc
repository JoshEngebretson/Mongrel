//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Actor.Spawn.vc 4373 2011-02-27 17:22:59Z firebrand_kh $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//	Spawn functions
//**************************************************************************

//==========================================================================
//
//	A_TossGib
//
//==========================================================================

final void A_TossGib()
{
	EntityEx gib;
	float an;
	float speed;
	class<EntityEx> tp;

	if (bNoBlood)
	{
		//tp = Junk;
	}
	else
	{
		//tp = Meat;
	}
	gib = Spawn(tp, Origin + vector(0.0, 0.0, 24.0));
	if (!gib)
	{
		return;
	}

	an = Random() * 360.0;
	gib.Angles.yaw = an;
	speed = Random() * 16.0 * 35.0;
	gib.Velocity.x = speed * cos(an);
	gib.Velocity.y = speed * sin(an);
	gib.Velocity.z = Random() * 16.0 * 35.0;
}

//==========================================================================
//
//	A_SpawnDebris
//
//==========================================================================

final void A_SpawnDebris(class<Actor> SpawnType, optional bool TransTransl,
	optional float MultH, optional float MultV)
{
	if (!SpawnType)
	{
		return;
	}
	if (MultH <= 0.0)
	{
		MultH = 1.0;
	}
	if (MultV <= 0.0)
	{
		MultV = 1.0;
	}

	int i;
	for (i = 0; i < SpawnType.default.Health; i++)
	{
		EntityEx A = Spawn(SpawnType, Origin + vector((Random() - 0.5) * 16.0,
			(Random() - 0.5) * 16.0, Random() * Height));
		if (A && TransTransl)
		{
			A.Translation = Translation;
		}
		//	The way it uses states sucks big time.
		if (A && i < GetClassNumOwnedStates(SpawnType))
		{
			A.SetState(GetStatePlus(GetClassFirstState(SpawnType), i));
			A.Velocity.x = MultH * (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.y = MultH * (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.z = MultV * (Random() * 8.0 + 5.0) * 35.0;
		}
	}
}

//==========================================================================
//
//	InitSpawnedItem
//
//==========================================================================

final void InitSpawnedItem(EntityEx A, bool TransTransl, bool SetMaster,
	bool NoCheckPos, bool Telestomp, bool TransPitch, bool TransPointers)
{
	if (!A)
	{
		return;
	}

	if (TransTransl && !bDontTranslate)
	{
		A.Translation = Translation;
	}

	if (TransPointers)
	{
		A.Target = Target;
		A.Master = Master; // This will be overridden later if SIXF_SETMASTER is set
		A.Tracer = Tracer;
	}

	if (TransPitch)
	{
		A.Angles.pitch = Angles.pitch;
	}

	//	Find instigator for missiles.
	EntityEx Instig = self;
	while (Instig && Instig.IsMissile(true))
	{
		Instig = Instig.Target;
	}

	if (Telestomp)
	{
		A.TeleportMove(A.Origin, true);
		//	We need this, because otherwise nothing will be spawned if
		// something was telestomped.
		NoCheckPos = true;
	}

	if (A.bMonster)
	{
		//	Check if thing fits in it's current location.
		if (!NoCheckPos && !A.TestLocation())
		{
			if (A.CountsAsKill())
			{
				Level.TotalKills--;
			}
			A.Destroy();
			//	Set result for state chain calls.
			if (XLevel.StateCall)
			{
				XLevel.StateCall->Result = false;
			}
			return;
		}

		if (Instig)
		{
			if (Instig.bMonster)
			{
				A.CopyFriendliness(self, true);
				if (SetMaster)
				{
					A.Master = self;
				}
			}
			else if (Instig.bIsPlayer)
			{
				//	Make monster friendly.
				A.bFriendly = true;
				EntityEx Atk = PlayerEx(Instig.Player).Attacker;
				if (Atk && !Atk.bFriendly)
				{
					//	Make it attack monster who last attacked player.
					A.LastHeard = Atk;
					A.Target = Atk;
				}
			}
		}
	}
	else if (!TransPitch)
	{
		//	For missiles or anything else set target to instigator.
		if (!Instig)
		{
			Instig = self;
		}
		A.Target = Instig;
	}
}


